
@misc{data_introducing_2021,
	title = {Introducing the {Shell}},
	url = {https://datacarpentry.org/shell-genomics/01-introduction/},
	urldate = {2022-01-14},
	publisher = {datacarpentry},
	author = {data, carpentry},
	year = {2021},
}

@misc{noauthor_datacamp_2020,
	title = {Datacamp {Light}},
	url = {https://github.com/datacamp-light},
	abstract = {An interactive learning widget for R and Python},
	publisher = {datacamp},
	year = {2020},
}

@book{deitel_intro_2019,
	edition = {1st},
	title = {Intro to {Python} for {Computer} {Science} and {Data} {Science}: {Learning} to {Program} with {AI}, {Big} {Data} and {The} {Cloud}},
	isbn = {0-13-540467-3},
	publisher = {Pearson},
	author = {Deitel, Paul and Deitel, Harvey},
	year = {2019},
}

@misc{vegaseat_dawing_2006,
	title = {Dawing a bar graph with the {Tkinter} canvas},
	url = {https://www.daniweb.com/programming/software-development/code/216816/draw-a-bar-graph-python},
	urldate = {2022-01-22},
	author = {vegaseat},
	month = nov,
	year = {2006},
}

@book{gaddis_starting_2020,
	edition = {5th},
	title = {Starting out with {Python}},
	isbn = {0-13-592903-2},
	publisher = {Pearson},
	author = {Gaddis, Tony},
	year = {2020},
}

@book{liang_introduction_2013,
	title = {Introduction to {Programming} {Using} {Python}},
	publisher = {Pearson},
	author = {Liang, Y.Daniel},
	year = {2013},
}

@misc{noauthor_pandas_2022,
	title = {pandas docstring guide},
	url = {https://pandas.pydata.org/docs/development/contributing_docstring.html},
	urldate = {2022-01-27},
	year = {2022},
}

@misc{noauthor_python_2022,
	title = {Python decimal module},
	url = {https://docs.python.org/3/library/decimal.html},
	urldate = {2022-01-27},
	year = {2022},
}

@misc{noauthor_github_2021,
	title = {{GitHub} {Copilot} · {Your} {AI} pair programmer},
	url = {https://copilot.github.com/},
	abstract = {GitHub Copilot works alongside you directly in your editor, suggesting whole lines or entire functions for you.},
	urldate = {2022-01-28},
	journal = {GitHub Copilot},
	year = {2021},
	file = {Snapshot:/Users/wangjie/Zotero/storage/2A87GNT9/copilot.github.com.html:text/html},
}

@misc{noauthor_anscombes_2022,
	title = {Anscombe's quartet},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Anscombe%27s_quartet&oldid=1063879826},
	abstract = {Anscombe's quartet comprises four data sets that have nearly identical simple descriptive statistics, yet have very different distributions and appear very different when graphed. Each dataset consists of eleven (x,y) points. They were constructed in 1973 by the statistician Francis Anscombe to demonstrate both the importance of graphing data when analyzing it, and the effect of outliers and other influential observations on statistical properties. He described the article as being intended to counter the impression among statisticians that "numerical calculations are exact, but graphs are rough."},
	language = {en},
	urldate = {2022-01-28},
	journal = {Wikipedia},
	month = jan,
	year = {2022},
	note = {Page Version ID: 1063879826},
	file = {Snapshot:/Users/wangjie/Zotero/storage/NKPYDMT8/Anscombe's_quartet.html:text/html},
}

@misc{noauthor_pep_2001,
	title = {{PEP} 8 -- {Style} {Guide} for {Python} {Code}},
	url = {https://www.python.org/dev/peps/pep-0008/},
	abstract = {The official home of the Python Programming Language},
	language = {en},
	urldate = {2022-01-29},
	journal = {Python.org},
	year = {2001},
	file = {Snapshot:/Users/wangjie/Zotero/storage/874Y5F5D/pep-0008.html:text/html},
}

@misc{noauthor_kbconnector_nodate,
	title = {kb:connector zotero unavailable [{Zotero} {Documentation}]},
	url = {https://www.zotero.org/support/kb/connector_zotero_unavailable},
	urldate = {2022-02-04},
	file = {kb\:connector zotero unavailable [Zotero Documentation]:/Users/wangjie/Zotero/storage/TYIR4V3R/connector_zotero_unavailable.html:text/html},
}

@misc{noauthor_order_2022,
	title = {Order of operations},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Order_of_operations&oldid=1067447330},
	abstract = {In mathematics and computer programming, the order of operations (or operator precedence) is a collection of rules that reflect conventions about which procedures to perform first in order to evaluate a given mathematical expression.
For example, in mathematics and most computer languages, multiplication is granted a higher precedence than addition, and it has been this way since the introduction of modern algebraic notation. Thus, the expression 1 + 2 × 3 is interpreted to have the value 1 + (2 × 3) = 7, and not (1 + 2) × 3 = 9. When exponents were introduced in the 16th and 17th centuries, they were given precedence over both addition and multiplication, and could be placed only as a superscript to the right of their base. Thus 3 + 52 = 28 and 3 × 52 = 75.
These conventions exist to eliminate notational ambiguity, while allowing notation to be as brief as possible. Where it is desired to override the precedence conventions, or even simply to emphasize them, parentheses ( ) can be used to indicate an alternative order of operations (or to simply reinforce the default order of operations). For example, (2 + 3) × 4 = 20 forces addition to precede multiplication, while (3 + 5)2 = 64 forces addition to precede exponentiation. If multiple pairs of parentheses are required in a mathematical expression (such as in the case of nested parentheses), the parentheses may be replaced by brackets or braces to avoid confusion, as in [2 × (3 + 4)] − 5 = 9.},
	language = {en},
	urldate = {2022-02-04},
	journal = {Wikipedia},
	month = jan,
	year = {2022},
	note = {Page Version ID: 1067447330},
	file = {Snapshot:/Users/wangjie/Zotero/storage/GZNMBXB7/Order_of_operations.html:text/html},
}

@misc{noauthor_unicode_2022,
	title = {Unicode},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Unicode&oldid=1070448953},
	abstract = {Unicode, formally the Unicode Standard, is an information technology standard for the consistent encoding, representation, and handling of text expressed in most of the world's writing systems. The standard, which is maintained by the Unicode Consortium, defines 144,697 characters covering 159 modern and historic scripts, as well as symbols, emoji, and non-visual control and formatting codes.
The Unicode character repertoire is synchronized with ISO/IEC 10646, each being code-for-code identical with the other. The Unicode Standard, however, includes more than just the base code. Alongside the character encodings, the Consortium's official publication includes a wide variety of details about the scripts and how to display them: normalization rules, decomposition, collation, rendering, and bidirectional text display order for multilingual texts, and so on. The Standard also includes reference data files and visual charts to help developers and designers correctly implement the repertoire.
Unicode's success at unifying character sets has led to its widespread and predominant use in the internationalization and localization of computer software. The standard has been implemented in many recent technologies, including modern operating systems, XML, and most modern programming languages.
Unicode can be implemented by different character encodings. The Unicode standard defines Unicode Transformation Formats (UTF): UTF-8, UTF-16, and UTF-32, and several other encodings.  The most commonly used encodings are UTF-8, UTF-16, and the obsolete UCS-2 (a precursor of UTF-16 without full support for Unicode); GB18030, while not an official Unicode standard, is standardized in China and implements Unicode fully.
UTF-8, the dominant encoding on the World Wide Web (used in over 95\% of websites as of 2020, and up to 100\% for some languages) and on most Unix-like operating systems, uses one byte (8 bits) for the first 128 code points, and up to 4 bytes for other characters. The first 128 Unicode code points represent the ASCII characters, which means that any ASCII text is also a UTF-8 text.
UCS-2 uses two bytes (16 bits) for each character but can only encode the first 65,536 code points, the so-called Basic Multilingual Plane (BMP).  With 1,112,064 possible Unicode code points corresponding to characters (see below) on 17 planes, and with over 144,000 code points defined as of version 14.0, UCS-2 is only able to represent less than half of all encoded Unicode characters. Therefore, UCS-2 is obsolete, though still used in software. UTF-16 extends UCS-2, by using the same 16-bit encoding as UCS-2 for the Basic Multilingual Plane, and a 4-byte encoding for the other planes. As long as it contains no code points in the reserved range U+D800–U+DFFF, a UCS-2 text is valid UTF-16 text.
UTF-32 (also referred to as UCS-4) uses four bytes to encode any given code point, but not necessarily any given user-perceived character (loosely speaking, a grapheme), since a user-perceived character may be represented by a grapheme cluster (a sequence of multiple code points). Like UCS-2, the number of bytes per code point is fixed, facilitating code point indexing; but unlike UCS-2, UTF-32 is able to encode all Unicode code points. However, because each code point uses four bytes, UTF-32 takes significantly more space than other encodings, and is not widely used. Although UTF-32 has a fixed size for each code point, it is also variable-length with respect to user-perceived characters. Examples include: the Devanagari kshi, which is encoded by 4 code points, and national flag emojis, which are composed of two code points. All combining character sequences are graphemes, but there are other sequences of code points that are as well, for example {\textbackslash}r{\textbackslash}n.},
	language = {en},
	urldate = {2022-02-07},
	journal = {Wikipedia},
	month = feb,
	year = {2022},
	note = {Page Version ID: 1070448953},
	file = {Snapshot:/Users/wangjie/Zotero/storage/RD39CL3X/Unicode.html:text/html},
}

@misc{noauthor_unicode_nodate,
	title = {Unicode {HOWTO} — {Python} 3.10.2 documentation},
	url = {https://docs.python.org/3/howto/unicode.html},
	urldate = {2022-02-07},
	file = {Unicode HOWTO — Python 3.10.2 documentation:/Users/wangjie/Zotero/storage/CRUMK3GH/unicode.html:text/html},
}

@misc{noauthor_geometry_2021,
	title = {The {Geometry} of {Musical} {Rhythm}},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=The_Geometry_of_Musical_Rhythm&oldid=1055908180},
	abstract = {The Geometry of Musical Rhythm: What Makes a "Good" Rhythm Good? is a book on the mathematics of rhythms and drum beats. It was written by Godfried Toussaint, and published by Chapman \& Hall/CRC in 2013 and in an expanded second edition in 2020. The Basic Library List Committee of the Mathematical Association of America has suggested its inclusion in undergraduate mathematics libraries.},
	language = {en},
	urldate = {2022-02-09},
	journal = {Wikipedia},
	month = nov,
	year = {2021},
	note = {Page Version ID: 1055908180},
	file = {Snapshot:/Users/wangjie/Zotero/storage/5VQRBM4D/The_Geometry_of_Musical_Rhythm.html:text/html},
}

@misc{im_a_sam_what_2019,
	type = {Reddit {Post}},
	title = {What are the best indicators of two songs similarity?},
	url = {www.reddit.com/r/LetsTalkMusic/comments/bt5yei/what_are_the_best_indicators_of_two_songs/},
	urldate = {2022-02-09},
	journal = {r/LetsTalkMusic},
	author = {im\_a\_sam},
	month = may,
	year = {2019},
	file = {Reddit Post Snapshot:/Users/wangjie/Zotero/storage/ATP2M8M3/what_are_the_best_indicators_of_two_songs.html:text/html},
}

@misc{noauthor_warnings_nodate,
	title = {warnings — {Warning} control — {Python} 3.10.2 documentation},
	url = {https://docs.python.org/3/library/warnings.html},
	urldate = {2022-02-14},
	file = {warnings — Warning control — Python 3.10.2 documentation:/Users/wangjie/Zotero/storage/9D3UTTYG/warnings.html:text/html},
}

@misc{noauthor_pickle_nodate,
	title = {pickle — {Python} object serialization — {Python} 3.10.2 documentation},
	url = {https://docs.python.org/3/library/pickle.html},
	urldate = {2022-03-13},
	file = {pickle — Python object serialization — Python 3.10.2 documentation:/Users/wangjie/Zotero/storage/UDCFYT58/pickle.html:text/html},
}

@misc{noauthor_radian_2022,
	title = {Radian},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Radian&oldid=1075780220},
	abstract = {The radian, denoted by the symbol rad, is the SI unit for measuring angles, and is the standard unit of angular measure used in many areas of mathematics. The unit was formerly an SI supplementary unit (before that category was abolished in 1995) and the radian is now an SI derived unit.  The radian is defined in the SI as being a dimensionless value, and its symbol is accordingly often omitted, especially in mathematical writing.},
	language = {en},
	urldate = {2022-03-18},
	journal = {Wikipedia},
	month = mar,
	year = {2022},
	note = {Page Version ID: 1075780220},
	file = {Snapshot:/Users/wangjie/Zotero/storage/CBCLHE5M/Radian.html:text/html},
}

@misc{noauthor_random_nodate,
	title = {random — {Generate} pseudo-random numbers — {Python} 3.10.4 documentation},
	url = {https://docs.python.org/3/library/random.html},
	urldate = {2022-03-31},
	file = {random — Generate pseudo-random numbers — Python 3.10.4 documentation:/Users/wangjie/Zotero/storage/NGLPBVWL/random.html:text/html},
}

@misc{noauthor_52_nodate,
	title = {5.2 {Plain} text formats},
	url = {https://www.stat.auckland.ac.nz/~paul/ItDT/HTML/node38.html},
	urldate = {2022-04-07},
	file = {5.2 Plain text formats:/Users/wangjie/Zotero/storage/5F9A9R8U/node38.html:text/html},
}

@misc{python_how_nodate,
	title = {How to {Use} {Generators} and yield in {Python} – {Real} {Python}},
	url = {https://realpython.com/introduction-to-python-generators/},
	abstract = {In this step-by-step tutorial, you'll learn about generators and yielding in Python. You'll create generator functions and generator expressions using multiple Python yield statements. You'll also learn how to build data pipelines that take advantage of these Pythonic tools.},
	language = {en},
	urldate = {2022-05-15},
	author = {Python, Real},
	file = {Snapshot:/Users/wangjie/Zotero/storage/39Y5KKIB/introduction-to-python-generators.html:text/html},
}

@misc{rimpaporia_sliding_2021,
	title = {{SLIDING} {WINDOW} {ALGORITHM} {FOR} {K} {MEANS} {CLUSTERING}},
	url = {https://www.madrasresearch.org/post/sliding-window-algorithm-for-k-means-clustering},
	abstract = {Authors :  Rutuja Anil Doiphode, Tushar Tripathi, Rimpa Poria UNSUPERVISED LEARNING: WHAT IS CLUSTERING? This learning includes the discussion of its sub-topic Clustering. Clustering is important as we can get huge insights from the data after grouping them. The overall purpose of clustering is to divide large datasets into sample having a certain degree of similarity or commonality between them so as to form groups from the datasets having large population. In this we have investigated differen},
	language = {ta},
	urldate = {2022-05-15},
	journal = {MSRF{\textbar}NGO},
	author = {rimpaporia},
	month = apr,
	year = {2021},
}

@techreport{borassi_sliding_2020,
	title = {Sliding {Window} {Algorithms} for k-{Clustering} {Problems}},
	url = {http://arxiv.org/abs/2006.05850},
	abstract = {The sliding window model of computation captures scenarios in which data is arriving continuously, but only the latest \$w\$ elements should be used for analysis. The goal is to design algorithms that update the solution efficiently with each arrival rather than recomputing it from scratch. In this work, we focus on \$k\$-clustering problems such as \$k\$-means and \$k\$-median. In this setting, we provide simple and practical algorithms that offer stronger performance guarantees than previous results. Empirically, we show that our methods store only a small fraction of the data, are orders of magnitude faster, and find solutions with costs only slightly higher than those returned by algorithms with access to the full dataset.},
	number = {arXiv:2006.05850},
	urldate = {2022-05-15},
	institution = {arXiv},
	author = {Borassi, Michele and Epasto, Alessandro and Lattanzi, Silvio and Vassilvitskii, Sergei and Zadimoghaddam, Morteza},
	month = oct,
	year = {2020},
	doi = {10.48550/arXiv.2006.05850},
	note = {arXiv:2006.05850 [cs]
type: article},
	keywords = {Computer Science - Data Structures and Algorithms},
	annote = {Comment: 43 pages, 7 figures},
	file = {arXiv Fulltext PDF:/Users/wangjie/Zotero/storage/XSL3LVVC/Borassi et al. - 2020 - Sliding Window Algorithms for k-Clustering Problem.pdf:application/pdf;arXiv.org Snapshot:/Users/wangjie/Zotero/storage/ZRK8TT8Z/2006.html:text/html},
}

@misc{noauthor_sliding_nodate,
	title = {Sliding {Window} {Technique}},
	url = {https://quanticdev.com/algorithms/dynamic-programming/sliding-window/},
	urldate = {2022-05-15},
	file = {Sliding Window Technique:/Users/wangjie/Zotero/storage/RHFJ7K8P/sliding-window.html:text/html},
}

@unpublished{babcock_sliding_nodate,
	title = {Sliding {Window} {Computations} over {Data} {Streams}},
	url = {http://ilpubs.stanford.edu:8090/538/1/2002-25.pdf},
	author = {Babcock, Brian and Datar, Mayur and Motwani, Rajeev and OCallaghan, Liadan},
}

@misc{noauthor_sqlite_nodate,
	title = {{SQLite} {As} {An} {Application} {File} {Format}},
	url = {https://www.sqlite.org/appfileformat.html},
	urldate = {2022-06-24},
}

@misc{noauthor_mysql_nodate,
	title = {{MySQL} :: {Hash} join in {MySQL} 8},
	url = {https://dev.mysql.com/blog-archive/hash-join-in-mysql-8/},
	urldate = {2022-07-12},
	file = {MySQL \:\: Hash join in MySQL 8:/Users/wangjie/Zotero/storage/EJJNV46G/hash-join-in-mysql-8.html:text/html},
}

@misc{noauthor_guide_2022,
	title = {A {Guide} to {Data} {Pipelines} ({And} {How} to {Design} {One} {From} {Scratch})},
	url = {https://www.striim.com/blog/guide-to-data-pipelines/},
	abstract = {Data pipelines are the backbones of data architecture in an organization. Here's how to design one from scratch.},
	language = {en-US},
	urldate = {2022-07-19},
	journal = {Striim},
	month = apr,
	year = {2022},
	file = {Snapshot:/Users/wangjie/Zotero/storage/6CLDI843/guide-to-data-pipelines.html:text/html},
}

@misc{noauthor_what_nodate,
	title = {What is a {Data} {Pipeline}? {Definition}, {Types} \& {Use} {Cases}},
	shorttitle = {What is a {Data} {Pipeline}?},
	url = {https://www.qlik.com/us/data-integration/data-pipeline},
	abstract = {A data pipeline is a set of tools and processes used to automate the movement and transformation of data between a source system and a target repository.},
	language = {en},
	urldate = {2022-07-19},
	journal = {Qlik},
	file = {Snapshot:/Users/wangjie/Zotero/storage/TEXR4CQP/data-pipeline.html:text/html},
}

@misc{gottke_confused_nodate,
	title = {Confused {By} {Data} {Integration}? {Here} {Are} 25 {Key} {Terms} {That} {Will} {Enlighten} {You}},
	shorttitle = {Confused {By} {Data} {Integration}?},
	url = {https://www.quintly.com/blog/data-integration-glossary},
	abstract = {This data integration glossary will make you familiar with some of the most important key terms. Whether you are working on the integration of social media data, or on removing data silos, this post will have you covered.},
	language = {en-us},
	urldate = {2022-07-19},
	author = {Gottke, Julian},
}

@misc{noauthor_modern_nodate,
	title = {Modern {SQL}: {A} lot has changed since {SQL}-92},
	shorttitle = {Modern {SQL}},
	url = {https://modern-sql.com/},
	abstract = {SQL has evolved. Beyond the relational model. Discover it now.},
	language = {en},
	urldate = {2022-07-22},
	file = {Snapshot:/Users/wangjie/Zotero/storage/YR6YCEE5/modern-sql.com.html:text/html},
}

@misc{noauthor_how_nodate,
	title = {How to {Become} a ({Good}) {Data} {Scientist} - {Beginner} {Guide}},
	url = {https://www.kdnuggets.com/how-to-become-a-good-data-scientist-beginner-guide.html/},
	abstract = {A guide covering the things you should learn to become a data scientist, including the basics of business intelligence, statistics, programming, and machine learning.},
	language = {en-US},
	urldate = {2022-07-23},
	journal = {KDnuggets},
	note = {Section: 2019 Oct Opinions},
	file = {Snapshot:/Users/wangjie/Zotero/storage/VHMU62TE/good-data-scientist-beginner-guide.html:text/html},
}

@misc{noauthor_challenge_nodate,
	title = {The {Challenge} of {Big} {Data} and {Data} {Science}},
	url = {https://www.annualreviews.org/doi/epdf/10.1146/annurev-polisci-090216-023229},
	language = {en},
	urldate = {2022-07-24},
	doi = {10.1146/annurev-polisci-090216-023229},
	file = {Full Text:/Users/wangjie/Zotero/storage/CVLJGRBX/The Challenge of Big Data and Data Science.pdf:application/pdf;Snapshot:/Users/wangjie/Zotero/storage/6AMMKQTK/annurev-polisci-090216-023229.html:text/html},
}

@article{li_vertical_2015,
	title = {{VERTIcal} {Grid} {lOgistic} regression ({VERTIGO})},
	volume = {23},
	doi = {10.1093/jamia/ocv146},
	abstract = {Objective: 
To develop an accurate logistic regression (LR) algorithm to support federated data analysis of vertically partitioned distributed data sets.

Material and methods:
We propose a novel technique that solves the binary LR problem by dual optimization to obtain a global solution for vertically partitioned data. We evaluated this new method, VERTIcal Grid lOgistic regression (VERTIGO), in artificial and real-world medical classification problems in terms of the area under the receiver operating characteristic curve, calibration, and computational complexity. We assumed that the institutions could "align" patient records (through patient identifiers or hashed "privacy-protecting" identifiers), and also that they both had access to the values for the dependent variable in the LR model (eg, that if the model predicts death, both institutions would have the same information about death).

Results:
The solution derived by VERTIGO has the same estimated parameters as the solution derived by applying classical LR. The same is true for discrimination and calibration over both simulated and real data sets. In addition, the computational cost of VERTIGO is not prohibitive in practice.

Discussion:
There is a technical challenge in scaling up federated LR for vertically partitioned data. When the number of patients m is large, our algorithm has to invert a large Hessian matrix. This is an expensive operation of time complexity O(m(3)) that may require large amounts of memory for storage and exchange of information. The algorithm may also not work well when the number of observations in each class is highly imbalanced.

Conclusion:
The proposed VERTIGO algorithm can generate accurate global models to support federated data analysis of vertically partitioned data.},
	journal = {Journal of the American Medical Informatics Association},
	author = {Li, Yong and Jiang, Xiaoqian and Wang, Shuang and Xiong, Hongkai and Ohno-Machado, Lucila},
	month = nov,
	year = {2015},
	file = {Full Text PDF:/Users/wangjie/Zotero/storage/YLEA4GU3/Li et al. - 2015 - VERTIcal Grid lOgistic regression (VERTIGO).pdf:application/pdf},
}

@misc{noauthor_sharding_nodate,
	title = {Sharding},
	url = {https://hazelcast.com/glossary/sharding/},
	abstract = {Sharding is the practice of optimizing database systems by separating the rows or columns of a larger database table into multiple smaller tables (shards).},
	language = {en-US},
	urldate = {2022-08-18},
	journal = {Hazelcast},
	file = {Snapshot:/Users/wangjie/Zotero/storage/P5JUAPJP/sharding.html:text/html},
}

@misc{noauthor_mysql_nodate-1,
	title = {{MySQL} :: {MySQL} 8.0 {Reference} {Manual} :: 24.1 {Overview} of {Partitioning} in {MySQL}},
	url = {https://dev.mysql.com/doc/refman/8.0/en/partitioning-overview.html},
	urldate = {2022-08-18},
	file = {MySQL \:\: MySQL 8.0 Reference Manual \:\: 24.1 Overview of Partitioning in MySQL:/Users/wangjie/Zotero/storage/QDS6T64T/partitioning-overview.html:text/html},
}

@misc{noauthor_literature_nodate,
	title = {Literature {Reviews}},
	url = {https://writingcenter.unc.edu/tips-and-tools/literature-reviews/},
	abstract = {This handout will explain what literature reviews are and offer insights into the form and construction literature reviews.},
	language = {en-US},
	urldate = {2022-08-26},
	journal = {The Writing Center • University of North Carolina at Chapel Hill},
	file = {Snapshot:/Users/wangjie/Zotero/storage/TFGYTEQA/literature-reviews.html:text/html},
}

@misc{wu_sql_2022,
	title = {{SQL} {Case} {Question} with {Detailed} {Answers} ({Step}-by-{Step})},
	url = {https://medium.com/@anna.wu9222/sql-case-question-with-detailed-answers-step-by-step-82e82115882b},
	abstract = {We’ve analyzed over 50,000 interviews from pre-IPO to Fortune 500 companies at Big Tech Interviews (BTI) to curate an exclusive list of the…},
	language = {en},
	urldate = {2022-08-31},
	journal = {Medium},
	author = {Wu, Anna},
	month = aug,
	year = {2022},
	file = {Snapshot:/Users/wangjie/Zotero/storage/B3ZKRTXM/sql-case-question-with-detailed-answers-step-by-step-82e82115882b.html:text/html},
}

@misc{noauthor_web_nodate,
	title = {Web {Design} {Best} {Practices} {Checklist}},
	url = {https://terrymorris.net/bestpractices/},
	urldate = {2022-09-08},
	file = {Web Design Best Practices Checklist:/Users/wangjie/Zotero/storage/9CMYPDXH/bestpractices.html:text/html},
}

@book{r_core_team_r_2017,
	address = {Vienna, Austria},
	title = {R: {A} {Language} and {Environment} for {Statistical} {Computing}},
	url = {https://www.R-project.org/},
	publisher = {R Foundation for Statistical Computing},
	author = {{R Core Team}},
	year = {2017},
}

@book{xie_bookdown_2017,
	title = {bookdown: {Authoring} {Books} and {Technical} {Documents} with {R} {Markdown}},
	url = {https://CRAN.R-project.org/package=bookdown},
	author = {Xie, Yihui},
	year = {2017},
	annote = {R package version 0.5},
}

@book{xie_knitr_2017,
	title = {knitr: {A} {General}-{Purpose} {Package} for {Dynamic} {Report} {Generation} in {R}},
	url = {https://CRAN.R-project.org/package=knitr},
	author = {Xie, Yihui},
	year = {2017},
	annote = {R package version 1.17},
}

@book{allaire_rmarkdown_2017,
	title = {rmarkdown: {Dynamic} {Documents} for {R}},
	url = {https://CRAN.R-project.org/package=rmarkdown},
	author = {Allaire, J. J. and Xie, Yihui and McPherson, Jonathan and Luraschi, Javier and Ushey, Kevin and Atkins, Aron and Wickham, Hadley and Cheng, Joe and Chang, Winston},
	year = {2017},
	annote = {R package version 1.8},
}

@article{belkin_reconciling_2019,
	title = {Reconciling modern machine-learning practice and the classical bias–variance trade-off},
	volume = {116},
	issn = {0027-8424},
	url = {https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6689936/},
	doi = {10.1073/pnas.1903070116},
	abstract = {While breakthroughs in machine learning and artificial intelligence are changing society, our fundamental understanding has lagged behind. It is traditionally believed that fitting models to the training data exactly is to be avoided as it leads to poor performance on unseen data. However, powerful modern classifiers frequently have near-perfect fit in training, a disconnect that spurred recent intensive research and controversy on whether theory provides practical insights. In this work, we show how classical theory and modern practice can be reconciled within a single unified performance curve and propose a mechanism underlying its emergence. We believe this previously unknown pattern connecting the structure and performance of learning architectures will help shape design and understanding of learning algorithms., Breakthroughs in machine learning are rapidly changing science and society, yet our fundamental understanding of this technology has lagged far behind. Indeed, one of the central tenets of the field, the bias–variance trade-off, appears to be at odds with the observed behavior of methods used in modern machine-learning practice. The bias–variance trade-off implies that a model should balance underfitting and overfitting: Rich enough to express underlying structure in data and simple enough to avoid fitting spurious patterns. However, in modern practice, very rich models such as neural networks are trained to exactly fit (i.e., interpolate) the data. Classically, such models would be considered overfitted, and yet they often obtain high accuracy on test data. This apparent contradiction has raised questions about the mathematical foundations of machine learning and their relevance to practitioners. In this paper, we reconcile the classical understanding and the modern practice within a unified performance curve. This “double-descent” curve subsumes the textbook U-shaped bias–variance trade-off curve by showing how increasing model capacity beyond the point of interpolation results in improved performance. We provide evidence for the existence and ubiquity of double descent for a wide spectrum of models and datasets, and we posit a mechanism for its emergence. This connection between the performance and the structure of machine-learning models delineates the limits of classical analyses and has implications for both the theory and the practice of machine learning.},
	number = {32},
	urldate = {2022-10-05},
	journal = {Proceedings of the National Academy of Sciences of the United States of America},
	author = {Belkin, Mikhail and Hsu, Daniel and Ma, Siyuan and Mandal, Soumik},
	month = aug,
	year = {2019},
	pmid = {31341078},
	pmcid = {PMC6689936},
	pages = {15849--15854},
	file = {PubMed Central Full Text PDF:/Users/wangjie/Zotero/storage/48IDY3LA/Belkin et al. - 2019 - Reconciling modern machine-learning practice and t.pdf:application/pdf},
}

@article{briscoe_conceptual_2011,
	title = {Conceptual complexity and the bias/variance tradeoff},
	volume = {118},
	issn = {0010-0277},
	url = {https://www.sciencedirect.com/science/article/pii/S0010027710002295},
	doi = {10.1016/j.cognition.2010.10.004},
	abstract = {In this paper we propose that the conventional dichotomy between exemplar-based and prototype-based models of concept learning is helpfully viewed as an instance of what is known in the statistical learning literature as the bias/variance tradeoff. The bias/variance tradeoff can be thought of as a sliding scale that modulates how closely any learning procedure adheres to its training data. At one end of the scale (high variance), models can entertain very complex hypotheses, allowing them to fit a wide variety of data very closely—but as a result can generalize poorly, a phenomenon called overfitting. At the other end of the scale (high bias), models make relatively simple and inflexible assumptions, and as a result may fit the data poorly, called underfitting. Exemplar and prototype models of category formation are at opposite ends of this scale: prototype models are highly biased, in that they assume a simple, standard conceptual form (the prototype), while exemplar models have very little bias but high variance, allowing them to fit virtually any combination of training data. We investigated human learners’ position on this spectrum by confronting them with category structures at variable levels of intrinsic complexity, ranging from simple prototype-like categories to much more complex multimodal ones. The results show that human learners adopt an intermediate point on the bias/variance continuum, inconsistent with either of the poles occupied by most conventional approaches. We present a simple model that adjusts (regularizes) the complexity of its hypotheses in order to suit the training data, which fits the experimental data better than representative exemplar and prototype models.},
	language = {en},
	number = {1},
	urldate = {2022-10-05},
	journal = {Cognition},
	author = {Briscoe, Erica and Feldman, Jacob},
	month = jan,
	year = {2011},
	keywords = {Bias/variance, Complexity, Concept learning},
	pages = {2--16},
	file = {ScienceDirect Snapshot:/Users/wangjie/Zotero/storage/W8CFASDN/S0010027710002295.html:text/html;Submitted Version:/Users/wangjie/Zotero/storage/64R3XCPB/Briscoe and Feldman - 2011 - Conceptual complexity and the biasvariance tradeo.pdf:application/pdf},
}

@misc{noauthor_15_nodate,
	title = {1.5. {Stochastic} {Gradient} {Descent}},
	url = {https://scikit-learn/stable/modules/sgd.html},
	abstract = {Stochastic Gradient Descent (SGD) is a simple yet very efficient approach to fitting linear classifiers and regressors under convex loss functions such as (linear) Support Vector Machines and Logis...},
	language = {en},
	urldate = {2022-10-05},
	journal = {scikit-learn},
	file = {Snapshot:/Users/wangjie/Zotero/storage/5E6MJ4BU/sgd.html:text/html},
}

@misc{noauthor_random_nodate-1,
	title = {random — {Generate} pseudo-random numbers — {Python} 3.10.7 documentation},
	url = {https://docs.python.org/3/library/random.html},
	urldate = {2022-10-10},
	file = {random — Generate pseudo-random numbers — Python 3.10.7 documentation:/Users/wangjie/Zotero/storage/CHU7L3XB/random.html:text/html},
}

@misc{noauthor_mersenne_nodate,
	title = {Mersenne {Twister}: {A} random number generator (since 1997/10)},
	url = {http://www.math.sci.hiroshima-u.ac.jp/m-mat/MT/emt.html},
	urldate = {2022-10-10},
	file = {Mersenne Twister\: A random number generator (since 1997/10):/Users/wangjie/Zotero/storage/Y7URMI33/emt.html:text/html},
}

@unpublished{rich_pattis_reading_nodate,
	title = {Reading {Headers} and {Calling} {Functions}},
	url = {https://www.ics.uci.edu/~pattis/ICS-31/lectures/functions.pdf},
	author = {{Rich Pattis}},
}

@misc{noauthor_visual_nodate,
	title = {Visual {Studio} {Code} for the {Web}},
	url = {https://vscode.dev/github/microsoft/vscode-docs/blob/main/docs/languages/python.md},
	abstract = {Build with Visual Studio Code, anywhere, anytime, entirely in your browser.},
	urldate = {2022-10-18},
	file = {Snapshot:/Users/wangjie/Zotero/storage/ZH9AVEV6/python.html:text/html},
}

@misc{noauthor_css_nodate,
	title = {{CSS}, {SCSS}, and {Less} support in {Visual} {Studio} {Code}},
	url = {https://code.visualstudio.com/docs/languages/css},
	abstract = {Find out how Visual Studio Code can support your CSS, SCSS and Less development.},
	language = {en},
	urldate = {2022-10-18},
	file = {Snapshot:/Users/wangjie/Zotero/storage/GCGWUUID/css.html:text/html},
}
